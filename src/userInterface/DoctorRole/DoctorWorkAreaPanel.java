/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.BloodBankOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.OrganBankOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Workqueue.AcceptDonationWorkRequest;
import Business.Workqueue.DoctorWorkRequest;
import Business.Workqueue.LabWorkRequest;
import Business.Workqueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sahebsingh
 */
public class DoctorWorkAreaPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaPanel
     */
    
    private final JPanel userProcessContainer;
    private final UserAccount account;
    private final DoctorOrganization organization;
    private final Enterprise enterprise;
    private final EcoSystem system;
    private final Network network;

    public DoctorWorkAreaPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise, EcoSystem system, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;
        this.network = network;

        try {
            orgLabel.setText(organization.getName());
            netLabel.setText(network.getName());

            btnsend.setEnabled(false);

            
            populateWorkRequestJTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something went wrong..");
        }
    }

    public void populateWorkRequestJTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
            model.setRowCount(0);
            for (DoctorWorkRequest req : organization.getWorkQueue().getDoctorWorkRequestList()) {
                if (req.getNetwork().equals(network)) {
                    Object[] row = new Object[4];
                    row[0] = req;
                    row[1] = req.getDescription();
                    row[2] = req.getRequestedBy();
                    row[3] = req.getReceiver() == null ? null : req.getReceiver().getEmployee().getEmpName();
                    model.addRow(row);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something went wrong..");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        enterpriseLabel = new javax.swing.JLabel();
        accept = new javax.swing.JButton();
        orgLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        netLabel = new javax.swing.JLabel();
        btnsend = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        track = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 140, 190));
        setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(0, 140, 190));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Donation At", "Description", "Requested By", "Accepted By"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        enterpriseLabel.setText("Organization");

        accept.setText("Accept");
        accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });

        orgLabel.setText("<organizationName>");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Network");

        jLabel3.setText("Accept Donation");

        jLabel4.setText("Send ");

        netLabel.setText("<NetworkName>");

        btnsend.setText("Send");
        btnsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsendActionPerformed(evt);
            }
        });

        jLabel5.setText("Track Status");

        track.setText("Track");
        track.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(accept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnsend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(track, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(enterpriseLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orgLabel)
                                .addGap(63, 63, 63)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(netLabel)))))
                .addContainerGap(571, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(netLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accept)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsend)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(track)
                    .addComponent(jLabel5))
                .addContainerGap(382, Short.MAX_VALUE))
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed

         int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a donation to accept.");
            return;
        }
        try {
            String acceptedBy = String.valueOf(workRequestJTable.getValueAt(selectedRow, 3));
            if (acceptedBy.equals("null")) {
                btnsend.setEnabled(true);
                WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
                request.setReceiver(account);
                populateWorkRequestJTable();
            } else {
                JOptionPane.showMessageDialog(null, "Already Accepted");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something went wrong..");
        }
    }//GEN-LAST:event_acceptActionPerformed

    private void btnsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsendActionPerformed
        // TODO add your handling code here:

        
             int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a donation to send for testing.");
            return;
        }
        try {
            btnsend.setEnabled(false);
            String acceptedBy = String.valueOf(workRequestJTable.getValueAt(selectedRow, 3));
            DoctorWorkRequest doctorReq = (DoctorWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            String donationType = doctorReq.getDonationType();
            String testType = "";
            if (donationType.contains("Blood")) {
                testType = "Blood";
            }
            if (donationType.contains("Organ")) {
                testType = "Organ";
            }
            if (!acceptedBy.equals("null") && acceptedBy.equals(account.getEmployee().getEmpName())) {
                for (Network n : system.getNetworkList()) {
                    if (n.getName().equals(network.getName())) {
                        for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                            for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                                if (o instanceof LabOrganization) {
                                    LabWorkRequest req = new LabWorkRequest();
                                    req.setTestType(testType);
                                    req.setDescription(String.valueOf(workRequestJTable.getValueAt(selectedRow, 1)));
                                    req.setRequestedBy(acceptedBy);
                                    req.setStatus("Sent");
                          //          req.setDonorEmailId(doctorReq.getDonorEmailId());
                                    req.setNetwork(network.getName());
                                    o.getWorkQueue().getLabWorkRequestList().add(req);
                                    JOptionPane.showMessageDialog(null, "Test request sent successfully");
                                    doctorReq.setStatus("Complete");
                                    break;
                                }
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a donation accepted by you to send for testing.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something went wrong..");
        }
        
    }//GEN-LAST:event_btnsendActionPerformed

    private void trackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackActionPerformed
        // TODO add your handling code here:

        try {
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        if (o instanceof LabOrganization) {
                            userProcessContainer.add("TrackRequestJPanel", new TrackRequestPanel(userProcessContainer, account, enterprise, o.getWorkQueue().getDoctorWorkRequestList()));
                            layout.next(userProcessContainer);
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something went wrong..");
        }
    }//GEN-LAST:event_trackActionPerformed

          
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accept;
    private javax.swing.JButton btnsend;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel netLabel;
    private javax.swing.JLabel orgLabel;
    private javax.swing.JButton track;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
